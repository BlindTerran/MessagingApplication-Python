<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
        float: left;
    }

    #friend-requests-container {
        float: right;
    }
    #friend-requests-table th.border-left {
        border-left: 1px solid black;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Send friend request section-->
    <section id="send_friend_request_box" style="float: right; margin-left: 20px;">
        <p class="text">Send Friend Request: </p>
        <input id="friend_username" placeholder="friend's username">
        <button onclick="addFriend()">Send Friend Request</button>
    </section>

    <!-- Friend request list section -->
    <div id="friend-requests-container">
        <button id="refresh">Refresh</button>
        <table id="friend-requests-table">
            <thead>
                <tr>
                    <th>Friend Requests Sent</th>
                    <th class="border-left">Friend Requests Received</th>
                    
                </tr>
            </thead>
            <tbody id="friend-requests">

            </tbody>
        </table>
    </div>

    <!-- Friends list section -->
    <div id="friends-container">
        <button id="refresh-friends">Refresh</button>
        <table id="friends-table">
            <thead>
                <tr>
                    <th>Friends List</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="friends">

            </tbody>
        </table>
    </div>

</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room(receiver) {
       
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function isSuccessfulAddFriend(string) {
        if (string.startsWith("Successfully ")) {
            return true;
        }
        if (string.startsWith("Error: ")) {
            return false;
        }
        return false;
    }

    async function addFriend() {
        let friendUsername = $("#friend_username").val();
        let addFriendURL = "{{ url_for('send_friend_request') }}";
        // pass the friend's username and the current user's username to the server
        let res = await axios.post(addFriendURL, {
            friend_username: friendUsername,
            username: Cookies.get('username')
        });
        if (!isSuccessfulAddFriend(res.data)) {
            alert(res.data);
            return;
        }
        alert(`Successfully send friend request to ${friendUsername}.`);
    }

    async function removeFriend(friend_id) {
        let removeFriendURL = "{{ url_for('remove_friend') }}";
        let res = await axios.post(removeFriendURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully removed ${friend_id} from your friends list.`);
            refreshFriends();
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        }
    }

    async function acceptFriendRequest(friend_id) {
        let acceptFriendRequestURL = "{{ url_for('accept_friend_request') }}";
        let res = await axios.post(acceptFriendRequestURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully accepted friend request from ${friend_id}`);
            // remove the buttons and display the "Approved" status next to the friend request
            $(`#buttons-${friend_id}`).remove();
            $(`#request-${friend_id}`).append('<span> (Approved)</span>');
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        } 
    }

    async function rejectFriendRequest(friend_id) {
        let rejectFriendRequestURL = "{{ url_for('reject_friend_request') }}";
        let res = await axios.post(rejectFriendRequestURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully rejected friend request from ${friend_id}`);
            $(`#buttons-${friend_id}`).remove();
            $(`#request-${friend_id}`).append('<span> (Rejected)</span>');
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        }
    } 

    async function refreshFriendRequests() {
        let incomingRequestsURL = "{{ url_for('get_incoming_friend_requests') }}";
        let outgoingRequestsURL = "{{ url_for('get_outgoing_friend_requests') }}";

        let incomingRes = await axios.post(incomingRequestsURL, { username: Cookies.get('username') });
        let outgoingRes = await axios.post(outgoingRequestsURL, { username: Cookies.get('username') });
        
        // clear the table when refresh is clicked
        let table = $("#friend-requests");
        table.empty();
        
        if (outgoingRes.data.no_outgoing_friend_requests) {
            let row = $(`<tr><td>No outgoing friend requests</td><td></td></tr>`);
            table.append(row);
        } else {
            for (let request of outgoingRes.data) {
                let row = $(`<tr><td>${request.friend_id} (${request.status})</td><td></td></tr>`);
                table.append(row);
            }
        }

        if (incomingRes.data.no_incoming_friend_requests) {
            let row = $(`<tr><td></td><td>No incoming friend requests</td></tr>`);
            table.append(row);
        } else {
            // in incoming requests, the user_id field is who sent the request, and the friend_id field is the current user
            for (let request of incomingRes.data) {
                // if the requeste is pending, display the approve and reject buttons
                if (request.status == "pending") {
                    let row = $(`<tr><td></td><td id="request-${request.user_id}">${request.user_id} <span id="buttons-${request.user_id}"><button onclick="acceptFriendRequest('${request.user_id}')">Approve</button> <button onclick="rejectFriendRequest('${request.user_id}')">Reject</button></span></td></tr>`);
                    table.append(row);
                } else {
                    // if the request has been approved or rejected, display the status
                    let row = $(`<tr><td></td><td>${request.user_id} (${request.status})</td></tr>`);
                    table.append(row);
                }
            }
        }
    }

    $("#refresh").click(refreshFriendRequests);

    // call refreshFriendRequests when the page loads to refresh the friend requests
    $(document).ready(refreshFriendRequests);

    async function refreshFriends() {
        let friendsURL = "{{ url_for('get_friends') }}";
        let res = await axios.post(friendsURL, { username: Cookies.get('username') });

        let table = $("#friends");
        table.empty();

        if (res.data.no_friends) {
            let row = $(`<tr><td>You don't have any friend yet</td></tr>`);
            table.append(row);
        } else {
            for (let friend of res.data) {
                let row = $(`<tr><td>${friend.friend_id}</td><td><button class="chat-button" data-friend="${friend.friend_id}">Chat</button><button class="remove-friend-button" data-friend="${friend.friend_id}">Remove Friend</button></td></tr>`);
                table.append(row);
            }
            
            // click event handler for the chat button
            $(".chat-button").click(function() {
                let receiver = $(this).data("friend");
                join_room(receiver);
            });

            // remove friend button click event handler
            $(".remove-friend-button").click(function() {
                let friendId = $(this).data("friend");
                removeFriend(friendId);
            });
        }
    }

    $("#refresh-friends").click(refreshFriends);
    $(document).ready(refreshFriends);



    
</script>
{% endblock %}
