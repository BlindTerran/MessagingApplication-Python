<!-- 
    Friends page, including friend list, group chat list, friend requests, add friends
-->

{% extends 'base.jinja' %}

{% block content %} 
<style>
    .left-sidebar {
        position: relative;
        top: 0px;
        left: 0px;
        width: 5.5vw;
        height: 100vh;
        background-color: {{primary_colour}};
        display: flex;
        align-items: flex-start;
        justify-content: center;
    }
    .banner {
        position: absolute;
        top: 0%;
        left: 5.5vw; 
        width: 100vw;
        height: 7vh;
        background-color: {{secondary_colour}}; 
    }
    .logo-text {
        font-size: 1.4vw;
        font-weight: 600;
        font-family: 'Roboto', sans-serif;
        color: {{primary_colour}}
        line-height: 7vh;
        padding-top: 1vh;
        padding-left: 2vw;
    }
    .divider-vertical {
        position: absolute;
        top: 2vh;
        left: 11.5vw;
        width: 3px;
        height: 3vh;
        background-color: {{primary_colour}};
        border-radius: 2px;
    }
    .title-text {
        font-size: 1.4vw;
        font-weight: 500;
        font-family: 'Roboto', sans-serif;
        color: {{primary_colour}};
        line-height: 7vh;
        padding-left: 1.5vw;
    }
    .icon-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start; 
        height: 100%; 
        position: absolute; 
        top: 0; 
    }
    .knowledge-repo-icon, .chat-icon, .friends-icon {
        color: #ffffff;
        fill: #ffffff;
        font-size: 24px;
        width: 24px;
        height: 24px;
        align-self: center;
        margin: 2vh 0;  /* the vertical gap between icons */
    }
    .knowledge-repo-icon {
        top: 10vh;
        margin-top: 9vh;
    }
    .chat-icon {
        top: 16vh;
    }
    .friends-icon {
        top: 22.6vh;
        width: 25px;
        height: 26px;
        align-items: center;
    }
    .indicator-bar {
        position: absolute;
        top: 15%; 
        left: -20px; /* how far the indicator bar is from the friends icon */
        width: 5px;
        height: 70%; /* 70% of the height of the friends icon container */
        background-color: #ffffff;
    }
    .friends-icon-container {
        position: relative;
    }

    .main-body-section {
        position: absolute;
        top: 7vh; /* below the banner */
        left: 5.5vw; /* right of the left sidebar */
        width: 94.5vw; /* take up the rest of the width */
        height: 93vh; 
        display: grid;
        grid-template-columns: 1fr 1fr; /* rows and columns divide the main body section into 4 subsections */
        grid-template-rows: 1fr 1fr; 
    }
    .section-title {
        padding: 1em; 
    }
    .horizontal-divider {
        width: 40%; 
        border: 0;
        border-top: 2px solid #f2f2f2; 
        margin-left: 2vw;
    }
</style>

<div class="banner">
    <span class="logo-text text-center">WisdomExch</span>
    <div class="divider-vertical"></div>
    <span class="title-text">Friends</span>
</div>

<div class="left-sidebar">
    <!-- svg icon, generated by Uizard -->
    <div class="icon-container">
        <a href="{{ url_for('knowledge_repository') }}">
            <svg class="knowledge-repo-icon" viewBox="0 0 24 24">
                <path d="M0 0h24v24H0V0z" fill="none"></path>
                <path d="M15 3H5c-1.1 0-1.99.9-1.99 2L3 19c0 1.1.89 2 1.99 2
                        H19c1.1 0 2-.9 2-2V9l-6-6zM8 17c-.55 0-1-.45-1-1s.45-1 
                        1-1 1 .45 1 1-.45 1-1 1zm0-4c-.55 0-1-.45-1-1s.45-1 1-1 
                        1 .45 1 1-.45 1-1 1zm0-4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 
                        1 1-.45 1-1 1zm6 1V4.5l5.5 5.5H14z">
                </path>
            </svg>
        </a>
        <a href="{{ url_for('chat', username=username, theme_colour=theme_colour) }}">
            <svg class="chat-icon" viewBox="0 0 512 512">
                <path d="M256 32C114.6 32 0 125.1 0 240c0 49.63 21.35 94.98 56.97 130.7
                        c-12.5 50.37-54.27 95.27-54.77 95.77c-2.25 2.25-2.875 5.734-1.5 8.734
                        C1.979 478.2 4.75 480 8 480c66.25 0 115.1-31.76 140.6-51.39
                        C181.2 440.9 217.6 448 256 448c141.4 0 255.1-93.13 255.1-208S397.4 32 256 32z">
                </path>
            </svg>
        </a>
        <div class="friends-icon-container">
        <div class="indicator-bar"></div>
            <a href="{{ url_for('friends', username=username, theme_colour=theme_colour) }}">
                <svg class="friends-icon" viewBox="0 0 24 24">
                    <path fill="none" d="M0 0h24v24H0z"></path>
                    <path d="M16.67 13.13C18.04 14.06 19 15.32 19 17v3h4v-3c0-2.18-3.57-3.47-6.33-3.87zM9 4a4 4 0 1 0 0 8 
                            4 4 0 1 0 0-8zM15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4c-.47 0-.91.1-1.33.24a5.98 5.98 0 0 1 0 7.52
                            c.42.14.86.24 1.33.24zm-6 1c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z" fill-rule="evenodd">
                    </path>
                </svg>
            </a>
        </div>
    </div>
</div>


<!-- TODO: [style] instead of using header tag for each section title, use normal text with proper size properties, this 
    eliminates the inherent margin of the headers looks better -->

<div class="main-body-section">
    <div>
        <h2 class="section-title">Friends</h2>
        <hr class="horizontal-divider">
        <div id="friends-container">
            <button id="refresh-friends">Refresh</button>
            <table id="friends-table">
                <thead>
                    <tr>
                    </tr>
                </thead>
                <tbody id="friends">
    
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <div style="display: flex; justify-content: space-between;">
            <h3 class="section-title">Friend Requests Sent</h3>
            <h3 class="section-title">Friend Requests Received</h3>
        </div>
        <hr class="horizontal-divider">
        <div id="friend-requests-container">
            <button id="refresh">Refresh</button>
            <table id="friend-requests-table">
                <thead>
                    <tr>
                        
                    </tr>
                </thead>
                <tbody id="friend-requests">
    
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h2 class="section-title">Groups</h2>
        <hr class="horizontal-divider">
        <button id="refresh-group">Refresh</button>
        <div id="groups-container">
        
        </div>
    </div>
    <div>
        <h2 class="section-title">Add Friend</h2>
        <hr class="horizontal-divider">
        <section id="send_friend_request_box">
            <p class="text">Send Friend Request: </p>
            <input id="friend_username" placeholder="friend's username">
            <button onclick="addFriend()">Send Friend Request</button>
        </section>
    </div>
</div>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    const socket = io();

    function joinRoom(receiver) {
        let username = Cookies.get('username');
        socket.emit("join", username, receiver);
        
        // redirect to the chat page
        let themeColour = "{{ theme_colour }}";
        window.location.href = `{{ url_for('chat') }}?username=${username}&theme_colour=${themeColour}`;
    }

    function isSuccessfulAddFriend(string) {
        if (string.startsWith("Successfully ")) {
            return true;
        }
        if (string.startsWith("Error: ")) {
            return false;
        }
        return false;
    }

    async function addFriend() {
        let friendUsername = $("#friend_username").val();
        let addFriendURL = "{{ url_for('send_friend_request') }}";
        // pass the friend's username and the current user's username to the server
        let res = await axios.post(addFriendURL, {
            friend_username: friendUsername,
            username: Cookies.get('username')
        });
        if (!isSuccessfulAddFriend(res.data)) {
            alert(res.data);
            return;
        }
        alert(`Successfully send friend request to ${friendUsername}.`);
    }

    async function removeFriend(friend_id) {
        let removeFriendURL = "{{ url_for('remove_friend') }}";
        let res = await axios.post(removeFriendURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully removed ${friend_id} from your friends list.`);
            refreshFriends();
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        }
    }

    async function acceptFriendRequest(friend_id) {
        let acceptFriendRequestURL = "{{ url_for('accept_friend_request') }}";
        let res = await axios.post(acceptFriendRequestURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully accepted friend request from ${friend_id}`);
            // remove the buttons and display the "Approved" status next to the friend request
            $(`#buttons-${friend_id}`).remove();
            $(`#request-${friend_id}`).append('<span> (Approved)</span>');
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        } 
    }

    async function rejectFriendRequest(friend_id) {
        let rejectFriendRequestURL = "{{ url_for('reject_friend_request') }}";
        let res = await axios.post(rejectFriendRequestURL, {
            username: Cookies.get('username'),
            friend_username: friend_id
        });
        if (res.status == 200) {
            alert(`Successfully rejected friend request from ${friend_id}`);
            $(`#buttons-${friend_id}`).remove();
            $(`#request-${friend_id}`).append('<span> (Rejected)</span>');
        } else if (res.status == 404) {
            alert(`Error: Friendship does not exist.`);
        }
    } 

    async function refreshFriends() {
        let friendsURL = "{{ url_for('get_friends') }}";
        let res = await axios.post(friendsURL, { username: Cookies.get('username') });

        let table = $("#friends");
        table.empty();

        if (res.data.no_friends) {
            let row = $(`<tr><td>You don't have any friend yet</td></tr>`);
            table.append(row);
        } else {
            for (let friend of res.data) {
                let row = $(`<tr><td>${friend.friend_id}</td><td><button class="chat-button" data-friend="${friend.friend_id}">Chat</button><button class="remove-friend-button" data-friend="${friend.friend_id}">Remove Friend</button></td></tr>`);
                table.append(row);
            }
            
            // click event handler for the chat button
            $(".chat-button").click(function() {
                let receiver = $(this).data("friend");
                joinRoom(receiver);
            });

            // remove friend button click event handler
            $(".remove-friend-button").click(function() {
                let friendId = $(this).data("friend");
                removeFriend(friendId);
            });
        }
    }
    $("#refresh-friends").click(refreshFriends);
    $(document).ready(refreshFriends);

    async function refreshFriendRequests() {
        let incomingRequestsURL = "{{ url_for('get_incoming_friend_requests') }}";
        let outgoingRequestsURL = "{{ url_for('get_outgoing_friend_requests') }}";

        let incomingRes = await axios.post(incomingRequestsURL, { username: Cookies.get('username') });
        let outgoingRes = await axios.post(outgoingRequestsURL, { username: Cookies.get('username') });
        
        // clear the table when refresh is clicked
        let table = $("#friend-requests");
        table.empty();
        
        if (outgoingRes.data.no_outgoing_friend_requests) {
            let row = $(`<tr><td>No outgoing friend requests</td><td></td></tr>`);
            table.append(row);
        } else {
            for (let request of outgoingRes.data) {
                let row = $(`<tr><td>${request.friend_id} (${request.status})</td><td></td></tr>`);
                table.append(row);
            }
        }

        if (incomingRes.data.no_incoming_friend_requests) {
            let row = $(`<tr><td></td><td>No incoming friend requests</td></tr>`);
            table.append(row);
        } else {
            // in incoming requests, the user_id field is who sent the request, and the friend_id field is the current user
            for (let request of incomingRes.data) {
                // if the requeste is pending, display the approve and reject buttons
                if (request.status == "pending") {
                    let row = $(`<tr><td></td><td id="request-${request.user_id}">${request.user_id} <span id="buttons-${request.user_id}"><button onclick="acceptFriendRequest('${request.user_id}')">Approve</button> <button onclick="rejectFriendRequest('${request.user_id}')">Reject</button></span></td></tr>`);
                    table.append(row);
                } else {
                    // if the request has been approved or rejected, display the status
                    let row = $(`<tr><td></td><td>${request.user_id} (${request.status})</td></tr>`);
                    table.append(row);
                }
            }
        }
    }
    $("#refresh").click(refreshFriendRequests);
    $(document).ready(refreshFriendRequests);

    async function refreshGroups() {
        let groupsURL = "{{ url_for('get_group_chats') }}";
        let res = await axios.post(groupsURL, { username: Cookies.get('username') });

        let container = $("#groups-container");
        container.empty();

        if (res.data.no_group_chats) {
            let row = $(`<tr><td>You are not in any group yet</td></tr>`);
            container.append(row);
        } else {
            for (let group of res.data) {
                let groupElement = $(`<tr><td>${group.chatroom_name}</td><td><button class="group-chat-button" data-group="${group.group_id}">Chat</button></td></tr>`);
                container.append(groupElement);
            }

            $(".group-chat-button").click(function() {
                let username = Cookies.get('username');
                let themeColour = "{{ theme_colour }}";
                window.location.href = `{{ url_for('chat') }}?username=${username}&theme_colour=${themeColour}`;
            });
        }
    }
    $("#refresh-group").click(refreshGroups);
    $(document).ready(refreshGroups);

</script>


{% endblock %}
